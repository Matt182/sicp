#lang racket

(define (averager a b res)
  (define (process-new-value)
    (cond ((and (has-value? a)
                (has-value? b))
           (set-value! res (/ (+ (get-value a) (get-value b)) 2) me))
          ((and (has-value? a)
                (has-value? res))
           (set-value! b (- (* (get-value res) 2) (get-value a)) me))
          ((and (has-value? b)
                (has-value? res))
           (set-value! a (- (* (get-value res) 2) (get-value b)) me))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (forget-value! res me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-value)
           (process-new-value))
          ((eq? request 'I-lost-me-value)
           (process-forgot-value))
          (else (error "Неизвестный запрос"))))
  (connect a me)
  (connect b me)
  (connect res me)
  me)